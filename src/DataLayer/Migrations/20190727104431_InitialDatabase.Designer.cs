// <auto-generated />
using System;
using DataLayer.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataLayer.Migrations
{
    [DbContext(typeof(MusicLibraryDbContext))]
    [Migration("20190727104431_InitialDatabase")]
    partial class InitialDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0-preview7.19362.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataLayer.Entities.Album", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Approved");

                    b.Property<decimal>("AverageQuality")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BandId");

                    b.Property<int>("CategoryId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<int?>("ImageStorageFileId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("BandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ImageStorageFileId");

                    b.ToTable("Albums");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Approved = true,
                            AverageQuality = 0m,
                            BandId = 1,
                            CategoryId = 1,
                            CreateDate = new DateTime(2019, 7, 27, 12, 44, 30, 772, DateTimeKind.Local).AddTicks(8320),
                            ImageStorageFileId = 4,
                            Name = "Mutter"
                        },
                        new
                        {
                            Id = 2,
                            Approved = true,
                            AverageQuality = 0m,
                            BandId = 1,
                            CategoryId = 1,
                            CreateDate = new DateTime(2019, 7, 27, 12, 44, 30, 773, DateTimeKind.Local).AddTicks(1983),
                            ImageStorageFileId = 5,
                            Name = "Liebe ist für alle da"
                        },
                        new
                        {
                            Id = 3,
                            Approved = true,
                            AverageQuality = 0m,
                            BandId = 2,
                            CategoryId = 1,
                            CreateDate = new DateTime(2019, 7, 27, 12, 44, 30, 773, DateTimeKind.Local).AddTicks(2073),
                            ImageStorageFileId = 8,
                            Name = "GOT YOUR SIX"
                        },
                        new
                        {
                            Id = 4,
                            Approved = true,
                            AverageQuality = 0m,
                            BandId = 3,
                            CategoryId = 1,
                            CreateDate = new DateTime(2019, 7, 27, 12, 44, 30, 773, DateTimeKind.Local).AddTicks(2082),
                            ImageStorageFileId = 10,
                            Name = "End Of The Prophesied Dawn"
                        },
                        new
                        {
                            Id = 5,
                            Approved = true,
                            AverageQuality = 0m,
                            BandId = 4,
                            CategoryId = 1,
                            CreateDate = new DateTime(2019, 7, 27, 12, 44, 30, 773, DateTimeKind.Local).AddTicks(2089),
                            ImageStorageFileId = 14,
                            Name = "Skills in Pills"
                        },
                        new
                        {
                            Id = 6,
                            Approved = true,
                            AverageQuality = 0m,
                            BandId = 5,
                            CategoryId = 1,
                            CreateDate = new DateTime(2019, 7, 27, 12, 44, 30, 773, DateTimeKind.Local).AddTicks(2094),
                            ImageStorageFileId = 18,
                            Name = "All hope is gone"
                        },
                        new
                        {
                            Id = 7,
                            Approved = true,
                            AverageQuality = 0m,
                            BandId = 5,
                            CategoryId = 1,
                            CreateDate = new DateTime(2019, 7, 27, 12, 44, 30, 773, DateTimeKind.Local).AddTicks(2099),
                            ImageStorageFileId = 19,
                            Name = "Iowa"
                        },
                        new
                        {
                            Id = 8,
                            Approved = true,
                            AverageQuality = 0m,
                            BandId = 6,
                            CategoryId = 1,
                            CreateDate = new DateTime(2019, 7, 27, 12, 44, 30, 773, DateTimeKind.Local).AddTicks(2104),
                            ImageStorageFileId = 20,
                            Name = "Issues"
                        });
                });

            modelBuilder.Entity("DataLayer.Entities.AlbumReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AlbumId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<int>("CreatedById");

                    b.Property<DateTime>("EditDate");

                    b.Property<int>("Quality");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("CreatedById");

                    b.ToTable("AlbumReviews");
                });

            modelBuilder.Entity("DataLayer.Entities.AlbumSong", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AlbumId");

                    b.Property<int>("SongId");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("SongId");

                    b.ToTable("AlbumSongs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AlbumId = 1,
                            SongId = 1
                        },
                        new
                        {
                            Id = 2,
                            AlbumId = 1,
                            SongId = 2
                        },
                        new
                        {
                            Id = 3,
                            AlbumId = 2,
                            SongId = 3
                        },
                        new
                        {
                            Id = 4,
                            AlbumId = 2,
                            SongId = 4
                        },
                        new
                        {
                            Id = 5,
                            AlbumId = 3,
                            SongId = 5
                        },
                        new
                        {
                            Id = 6,
                            AlbumId = 4,
                            SongId = 6
                        },
                        new
                        {
                            Id = 7,
                            AlbumId = 4,
                            SongId = 7
                        },
                        new
                        {
                            Id = 8,
                            AlbumId = 5,
                            SongId = 8
                        },
                        new
                        {
                            Id = 9,
                            AlbumId = 5,
                            SongId = 9
                        },
                        new
                        {
                            Id = 10,
                            AlbumId = 6,
                            SongId = 10
                        },
                        new
                        {
                            Id = 11,
                            AlbumId = 6,
                            SongId = 11
                        },
                        new
                        {
                            Id = 12,
                            AlbumId = 6,
                            SongId = 12
                        },
                        new
                        {
                            Id = 13,
                            AlbumId = 7,
                            SongId = 13
                        },
                        new
                        {
                            Id = 14,
                            AlbumId = 7,
                            SongId = 14
                        },
                        new
                        {
                            Id = 15,
                            AlbumId = 8,
                            SongId = 15
                        },
                        new
                        {
                            Id = 16,
                            AlbumId = 8,
                            SongId = 16
                        });
                });

            modelBuilder.Entity("DataLayer.Entities.Artist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Approved");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Artists");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Approved = true,
                            FirstName = "Till",
                            LastName = "Lindemann"
                        },
                        new
                        {
                            Id = 2,
                            Approved = true,
                            FirstName = "Richard",
                            LastName = "Kruspe"
                        },
                        new
                        {
                            Id = 3,
                            Approved = true,
                            FirstName = "Paul",
                            LastName = "Landers"
                        },
                        new
                        {
                            Id = 4,
                            Approved = true,
                            FirstName = "Christian",
                            LastName = "Lorenz"
                        },
                        new
                        {
                            Id = 5,
                            Approved = true,
                            FirstName = "Oliver",
                            LastName = "Riedel"
                        },
                        new
                        {
                            Id = 6,
                            Approved = true,
                            FirstName = "Christoph",
                            LastName = "Schneider"
                        },
                        new
                        {
                            Id = 7,
                            Approved = true,
                            FirstName = "Peter",
                            LastName = "Tägtgren"
                        },
                        new
                        {
                            Id = 8,
                            Approved = true,
                            FirstName = "Corey",
                            LastName = "Taylor"
                        },
                        new
                        {
                            Id = 9,
                            Approved = true,
                            FirstName = "Mick",
                            LastName = "Thomson"
                        },
                        new
                        {
                            Id = 10,
                            Approved = true,
                            FirstName = "Sid",
                            LastName = "Wilson"
                        },
                        new
                        {
                            Id = 11,
                            Approved = true,
                            FirstName = "Jim",
                            LastName = "Root"
                        },
                        new
                        {
                            Id = 12,
                            Approved = true,
                            FirstName = "Craig",
                            LastName = "Jones"
                        },
                        new
                        {
                            Id = 13,
                            Approved = true,
                            FirstName = "Shawn",
                            LastName = "Crahan"
                        },
                        new
                        {
                            Id = 14,
                            Approved = true,
                            FirstName = "Alessandro",
                            LastName = "Venturella"
                        },
                        new
                        {
                            Id = 15,
                            Approved = true,
                            FirstName = "Jay",
                            LastName = "Weinberg"
                        },
                        new
                        {
                            Id = 16,
                            Approved = true,
                            FirstName = "Jonathan",
                            LastName = "Davis"
                        },
                        new
                        {
                            Id = 17,
                            Approved = true,
                            FirstName = "James",
                            LastName = "Shaffer"
                        },
                        new
                        {
                            Id = 18,
                            Approved = true,
                            FirstName = "Reginald",
                            LastName = "Arvizu"
                        },
                        new
                        {
                            Id = 19,
                            Approved = true,
                            FirstName = "Brian",
                            LastName = "Welch"
                        },
                        new
                        {
                            Id = 20,
                            Approved = true,
                            FirstName = "Ray",
                            LastName = "Luzier"
                        });
                });

            modelBuilder.Entity("DataLayer.Entities.Band", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Approved");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int?>("ImageStorageFileId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("ImageStorageFileId");

                    b.ToTable("Bands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Approved = true,
                            CreateDate = new DateTime(2019, 7, 27, 12, 44, 30, 767, DateTimeKind.Local).AddTicks(5536),
                            Description = "Industrial metal",
                            ImageStorageFileId = 1,
                            Name = "Rammstein"
                        },
                        new
                        {
                            Id = 2,
                            Approved = true,
                            CreateDate = new DateTime(2019, 7, 27, 12, 44, 30, 772, DateTimeKind.Local).AddTicks(1556),
                            Description = "Heavy metal",
                            ImageStorageFileId = 6,
                            Name = "Five Finger Death Punch"
                        },
                        new
                        {
                            Id = 3,
                            Approved = true,
                            CreateDate = new DateTime(2019, 7, 27, 12, 44, 30, 772, DateTimeKind.Local).AddTicks(1630),
                            Description = "Power metal",
                            ImageStorageFileId = 9,
                            Name = "Andragona"
                        },
                        new
                        {
                            Id = 4,
                            Approved = true,
                            CreateDate = new DateTime(2019, 7, 27, 12, 44, 30, 772, DateTimeKind.Local).AddTicks(1640),
                            Description = "Industrial metal",
                            ImageStorageFileId = 13,
                            Name = "Lindemann"
                        },
                        new
                        {
                            Id = 5,
                            Approved = true,
                            CreateDate = new DateTime(2019, 7, 27, 12, 44, 30, 772, DateTimeKind.Local).AddTicks(1646),
                            Description = "Heavy metal",
                            ImageStorageFileId = 15,
                            Name = "Slipknot"
                        },
                        new
                        {
                            Id = 6,
                            Approved = true,
                            CreateDate = new DateTime(2019, 7, 27, 12, 44, 30, 772, DateTimeKind.Local).AddTicks(1651),
                            Description = "Nu Metal",
                            ImageStorageFileId = 21,
                            Name = "Korn"
                        });
                });

            modelBuilder.Entity("DataLayer.Entities.BandMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArtistId");

                    b.Property<int>("BandId");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.HasIndex("BandId");

                    b.ToTable("BandMembers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArtistId = 1,
                            BandId = 1
                        },
                        new
                        {
                            Id = 2,
                            ArtistId = 2,
                            BandId = 1
                        },
                        new
                        {
                            Id = 3,
                            ArtistId = 3,
                            BandId = 1
                        },
                        new
                        {
                            Id = 4,
                            ArtistId = 4,
                            BandId = 1
                        },
                        new
                        {
                            Id = 5,
                            ArtistId = 5,
                            BandId = 1
                        },
                        new
                        {
                            Id = 6,
                            ArtistId = 6,
                            BandId = 1
                        },
                        new
                        {
                            Id = 7,
                            ArtistId = 1,
                            BandId = 4
                        },
                        new
                        {
                            Id = 8,
                            ArtistId = 7,
                            BandId = 4
                        },
                        new
                        {
                            Id = 9,
                            ArtistId = 8,
                            BandId = 5
                        },
                        new
                        {
                            Id = 10,
                            ArtistId = 9,
                            BandId = 5
                        },
                        new
                        {
                            Id = 11,
                            ArtistId = 10,
                            BandId = 5
                        },
                        new
                        {
                            Id = 12,
                            ArtistId = 11,
                            BandId = 5
                        },
                        new
                        {
                            Id = 13,
                            ArtistId = 12,
                            BandId = 5
                        },
                        new
                        {
                            Id = 14,
                            ArtistId = 13,
                            BandId = 5
                        },
                        new
                        {
                            Id = 15,
                            ArtistId = 14,
                            BandId = 5
                        },
                        new
                        {
                            Id = 16,
                            ArtistId = 15,
                            BandId = 5
                        },
                        new
                        {
                            Id = 17,
                            ArtistId = 16,
                            BandId = 6
                        },
                        new
                        {
                            Id = 18,
                            ArtistId = 17,
                            BandId = 6
                        },
                        new
                        {
                            Id = 19,
                            ArtistId = 18,
                            BandId = 6
                        },
                        new
                        {
                            Id = 20,
                            ArtistId = 19,
                            BandId = 6
                        },
                        new
                        {
                            Id = 21,
                            ArtistId = 20,
                            BandId = 6
                        });
                });

            modelBuilder.Entity("DataLayer.Entities.BandReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BandId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<int>("CreatedById");

                    b.Property<DateTime>("EditDate");

                    b.Property<int>("Quality");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("BandId");

                    b.HasIndex("CreatedById");

                    b.ToTable("BandReviews");
                });

            modelBuilder.Entity("DataLayer.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Name_csCZ")
                        .HasMaxLength(100);

                    b.Property<string>("Name_esES")
                        .HasMaxLength(100);

                    b.Property<string>("Name_skSK")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Metal",
                            Name_csCZ = "Metal",
                            Name_esES = "Metal",
                            Name_skSK = "Metal"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Rock",
                            Name_csCZ = "Rock",
                            Name_esES = "Rock",
                            Name_skSK = "Rock"
                        });
                });

            modelBuilder.Entity("DataLayer.Entities.SliderImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BandId");

                    b.Property<int>("ImageStorageFileId");

                    b.HasKey("Id");

                    b.HasIndex("BandId");

                    b.HasIndex("ImageStorageFileId");

                    b.ToTable("SliderImages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BandId = 1,
                            ImageStorageFileId = 2
                        },
                        new
                        {
                            Id = 2,
                            BandId = 1,
                            ImageStorageFileId = 3
                        },
                        new
                        {
                            Id = 3,
                            BandId = 2,
                            ImageStorageFileId = 7
                        },
                        new
                        {
                            Id = 4,
                            BandId = 5,
                            ImageStorageFileId = 16
                        },
                        new
                        {
                            Id = 5,
                            BandId = 5,
                            ImageStorageFileId = 17
                        },
                        new
                        {
                            Id = 6,
                            BandId = 6,
                            ImageStorageFileId = 22
                        },
                        new
                        {
                            Id = 7,
                            BandId = 6,
                            ImageStorageFileId = 23
                        });
                });

            modelBuilder.Entity("DataLayer.Entities.Song", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Approved");

                    b.Property<int?>("AudioStorageFileId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("YoutubeUrlParam")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("AudioStorageFileId");

                    b.ToTable("Songs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Approved = true,
                            CreateDate = new DateTime(2019, 7, 27, 12, 44, 30, 773, DateTimeKind.Local).AddTicks(4518),
                            Name = "Ich Will",
                            YoutubeUrlParam = "EOnSh3QlpbQ"
                        },
                        new
                        {
                            Id = 2,
                            Approved = true,
                            CreateDate = new DateTime(2019, 7, 27, 12, 44, 30, 773, DateTimeKind.Local).AddTicks(6682),
                            Name = "Feuer Frei!",
                            YoutubeUrlParam = "ZkW-K5RQdzo"
                        },
                        new
                        {
                            Id = 3,
                            Approved = true,
                            CreateDate = new DateTime(2019, 7, 27, 12, 44, 30, 773, DateTimeKind.Local).AddTicks(6734),
                            Name = "Haifisch",
                            YoutubeUrlParam = "GukNjYQZW8s"
                        },
                        new
                        {
                            Id = 4,
                            Approved = true,
                            CreateDate = new DateTime(2019, 7, 27, 12, 44, 30, 773, DateTimeKind.Local).AddTicks(6741),
                            Name = "Ich Tu Dir Weh",
                            YoutubeUrlParam = "IxuEtL7gxoM"
                        },
                        new
                        {
                            Id = 5,
                            Approved = true,
                            CreateDate = new DateTime(2019, 7, 27, 12, 44, 30, 773, DateTimeKind.Local).AddTicks(6747),
                            Name = "Jekyll And Hyde",
                            YoutubeUrlParam = "HCBPmxiVMKk"
                        },
                        new
                        {
                            Id = 6,
                            Approved = true,
                            AudioStorageFileId = 11,
                            CreateDate = new DateTime(2019, 7, 27, 12, 44, 30, 773, DateTimeKind.Local).AddTicks(6751),
                            Name = "Fight for your praise",
                            YoutubeUrlParam = "oy7_bkN5eMU"
                        },
                        new
                        {
                            Id = 7,
                            Approved = true,
                            AudioStorageFileId = 12,
                            CreateDate = new DateTime(2019, 7, 27, 12, 44, 30, 773, DateTimeKind.Local).AddTicks(7498),
                            Name = "Miss You",
                            YoutubeUrlParam = "b9-fzLvC-bY"
                        },
                        new
                        {
                            Id = 8,
                            Approved = true,
                            CreateDate = new DateTime(2019, 7, 27, 12, 44, 30, 773, DateTimeKind.Local).AddTicks(7540),
                            Name = "Fish On",
                            YoutubeUrlParam = "eciZWNdkGqs"
                        },
                        new
                        {
                            Id = 9,
                            Approved = true,
                            CreateDate = new DateTime(2019, 7, 27, 12, 44, 30, 773, DateTimeKind.Local).AddTicks(7547),
                            Name = "Praise Abort",
                            YoutubeUrlParam = "QWE_M0CX9So"
                        },
                        new
                        {
                            Id = 10,
                            Approved = true,
                            CreateDate = new DateTime(2019, 7, 27, 12, 44, 30, 773, DateTimeKind.Local).AddTicks(7552),
                            Name = "Dead Memories",
                            YoutubeUrlParam = "9gsAz6S_zSw"
                        },
                        new
                        {
                            Id = 11,
                            Approved = true,
                            CreateDate = new DateTime(2019, 7, 27, 12, 44, 30, 773, DateTimeKind.Local).AddTicks(7557),
                            Name = "Psychosocial",
                            YoutubeUrlParam = "eIf3b6meriM"
                        },
                        new
                        {
                            Id = 12,
                            Approved = true,
                            CreateDate = new DateTime(2019, 7, 27, 12, 44, 30, 773, DateTimeKind.Local).AddTicks(7561),
                            Name = "Snuff",
                            YoutubeUrlParam = "LXEKuttVRIo"
                        },
                        new
                        {
                            Id = 13,
                            Approved = true,
                            CreateDate = new DateTime(2019, 7, 27, 12, 44, 30, 773, DateTimeKind.Local).AddTicks(7568),
                            Name = "Left Behind",
                            YoutubeUrlParam = "D1jQKpse7Yw"
                        },
                        new
                        {
                            Id = 14,
                            Approved = true,
                            CreateDate = new DateTime(2019, 7, 27, 12, 44, 30, 773, DateTimeKind.Local).AddTicks(7573),
                            Name = "Metabolic",
                            YoutubeUrlParam = "b3FpfQOxiKA"
                        },
                        new
                        {
                            Id = 15,
                            Approved = true,
                            CreateDate = new DateTime(2019, 7, 27, 12, 44, 30, 773, DateTimeKind.Local).AddTicks(7578),
                            Name = "Falling Away from Me",
                            YoutubeUrlParam = "2s3iGpDqQpQ"
                        },
                        new
                        {
                            Id = 16,
                            Approved = true,
                            CreateDate = new DateTime(2019, 7, 27, 12, 44, 30, 773, DateTimeKind.Local).AddTicks(7582),
                            Name = "Somebody Someone",
                            YoutubeUrlParam = "FBEE-t-uyI0"
                        });
                });

            modelBuilder.Entity("DataLayer.Entities.StorageFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("StorageFiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DisplayName = "rammstein_logo.jpg",
                            FileName = "rammstein_logo.jpg"
                        },
                        new
                        {
                            Id = 2,
                            DisplayName = "rammstein_guitar.jpg",
                            FileName = "rammstein_guitar.jpg"
                        },
                        new
                        {
                            Id = 3,
                            DisplayName = "Rammstein-Till-Lindemann-fire.jpg",
                            FileName = "Rammstein-Till-Lindemann-fire.jpg"
                        },
                        new
                        {
                            Id = 4,
                            DisplayName = "Mutter.jpg",
                            FileName = "Mutter.jpg"
                        },
                        new
                        {
                            Id = 5,
                            DisplayName = "Cover_lifad.png",
                            FileName = "Cover_lifad.png"
                        },
                        new
                        {
                            Id = 6,
                            DisplayName = "finger_death_punch_logo_1.gif",
                            FileName = "finger_death_punch_logo_1.gif"
                        },
                        new
                        {
                            Id = 7,
                            DisplayName = "finger_death_punch.jpg",
                            FileName = "finger_death_punch.jpg"
                        },
                        new
                        {
                            Id = 8,
                            DisplayName = "FFDP-Got-Your-Six-Album-Cover.jpg",
                            FileName = "FFDP-Got-Your-Six-Album-Cover.jpg"
                        },
                        new
                        {
                            Id = 9,
                            DisplayName = "Andragona.jpg",
                            FileName = "Andragona.jpg"
                        },
                        new
                        {
                            Id = 10,
                            DisplayName = "EndOfTheProphesiedDawn.jpg",
                            FileName = "EndOfTheProphesiedDawn.jpg"
                        },
                        new
                        {
                            Id = 11,
                            DisplayName = "andragona-fight-for-your-praise.mp3",
                            FileName = "andragona-fight-for-your-praise.mp3"
                        },
                        new
                        {
                            Id = 12,
                            DisplayName = "andragona-miss-you.mp3",
                            FileName = "andragona-miss-you.mp3"
                        },
                        new
                        {
                            Id = 13,
                            DisplayName = "Lindemann_logo.jpg",
                            FileName = "Lindemann_logo.jpg"
                        },
                        new
                        {
                            Id = 14,
                            DisplayName = "Lindemann_Skills_in_Pills.jpg",
                            FileName = "Lindemann_Skills_in_Pills.jpg"
                        },
                        new
                        {
                            Id = 15,
                            DisplayName = "slipknot_logo.jpg",
                            FileName = "slipknot_logo.jpg"
                        },
                        new
                        {
                            Id = 16,
                            DisplayName = "Slipknot.jpg",
                            FileName = "Slipknot.jpg"
                        },
                        new
                        {
                            Id = 17,
                            DisplayName = "Slipknot_Taylor.jpg",
                            FileName = "Slipknot_Taylor.jpg"
                        },
                        new
                        {
                            Id = 18,
                            DisplayName = "All_Hope_is_Gone.jpg",
                            FileName = "All_Hope_is_Gone.jpg"
                        },
                        new
                        {
                            Id = 19,
                            DisplayName = "Slipknot_Iowa.jpg",
                            FileName = "Slipknot_Iowa.jpg"
                        },
                        new
                        {
                            Id = 20,
                            DisplayName = "KoRnIssues.jpg",
                            FileName = "KoRnIssues.jpg"
                        },
                        new
                        {
                            Id = 21,
                            DisplayName = "Korn_logo.jpg",
                            FileName = "Korn_logo.jpg"
                        },
                        new
                        {
                            Id = 22,
                            DisplayName = "korn-5820-1078x516-1471045959.jpg",
                            FileName = "korn-5820-1078x516-1471045959.jpg"
                        },
                        new
                        {
                            Id = 23,
                            DisplayName = "OB-UL405_ikorn_G_20120906052811.jpg",
                            FileName = "OB-UL405_ikorn_G_20120906052811.jpg"
                        });
                });

            modelBuilder.Entity("DataLayer.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("ImageStorageFileId");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("UserRole");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("ImageStorageFileId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "user@admin.com",
                            FirstName = "User",
                            LastName = "Admin",
                            PasswordHash = "yMn+st3NC0i5gu9gzCF2m5fhR0c=",
                            PasswordSalt = "8RS5ODVNZWaGAGknGUqeiQ==",
                            UserRole = 2
                        },
                        new
                        {
                            Id = 2,
                            Email = "user@superuser.com",
                            FirstName = "Super",
                            LastName = "User",
                            PasswordHash = "yMn+st3NC0i5gu9gzCF2m5fhR0c=",
                            PasswordSalt = "8RS5ODVNZWaGAGknGUqeiQ==",
                            UserRole = 1
                        });
                });

            modelBuilder.Entity("DataLayer.Entities.UserAlbum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AlbumId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAlbums");
                });

            modelBuilder.Entity("DataLayer.Entities.Album", b =>
                {
                    b.HasOne("DataLayer.Entities.Band", "Band")
                        .WithMany("Albums")
                        .HasForeignKey("BandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Entities.StorageFile", "ImageStorageFile")
                        .WithMany()
                        .HasForeignKey("ImageStorageFileId");
                });

            modelBuilder.Entity("DataLayer.Entities.AlbumReview", b =>
                {
                    b.HasOne("DataLayer.Entities.Album", "Album")
                        .WithMany("Reviews")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.Entities.AlbumSong", b =>
                {
                    b.HasOne("DataLayer.Entities.Album", "Album")
                        .WithMany("AlbumSongs")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Entities.Song", "Song")
                        .WithMany()
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.Entities.Band", b =>
                {
                    b.HasOne("DataLayer.Entities.StorageFile", "ImageStorageFile")
                        .WithMany()
                        .HasForeignKey("ImageStorageFileId");
                });

            modelBuilder.Entity("DataLayer.Entities.BandMember", b =>
                {
                    b.HasOne("DataLayer.Entities.Artist", "Artist")
                        .WithMany("BandsMember")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Entities.Band", "Band")
                        .WithMany("BandMembers")
                        .HasForeignKey("BandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.Entities.BandReview", b =>
                {
                    b.HasOne("DataLayer.Entities.Band", "Band")
                        .WithMany()
                        .HasForeignKey("BandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.Entities.SliderImage", b =>
                {
                    b.HasOne("DataLayer.Entities.Band", "Band")
                        .WithMany("SliderImages")
                        .HasForeignKey("BandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Entities.StorageFile", "ImageStorageFile")
                        .WithMany()
                        .HasForeignKey("ImageStorageFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.Entities.Song", b =>
                {
                    b.HasOne("DataLayer.Entities.StorageFile", "AudioStorageFile")
                        .WithMany()
                        .HasForeignKey("AudioStorageFileId");
                });

            modelBuilder.Entity("DataLayer.Entities.User", b =>
                {
                    b.HasOne("DataLayer.Entities.StorageFile", "ImageStorageFile")
                        .WithMany()
                        .HasForeignKey("ImageStorageFileId");
                });

            modelBuilder.Entity("DataLayer.Entities.UserAlbum", b =>
                {
                    b.HasOne("DataLayer.Entities.Album", "Album")
                        .WithMany()
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
